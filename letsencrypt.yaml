---
  - name: "Let's Encrypt"
    hosts:
      - letsencrypt
    gather_facts: yes
    serial: 1
    vars:
      # Let's Encrypt settings
      letsencrypt_dir: /etc/letsencrypt
      letsencrypt_cert_dir: /etc/letsencrypt/certs
      letsencrypt_config_dir: /etc/letsencrypt/config
      # Acme.sh settings
      acme_dns_plugin: dns_gandi_livedns
      acme_server: letsencrypt
    environment:
      # Put your acme.sh environment variables here
      GANDI_LIVEDNS_KEY: put_your_key_here
    tasks:
      - name: "Install git"
        ansible.builtin.package:
          name: git
          state: present
      - name: "Clone git repository acme.sh"
        git: 
          repo: https://github.com/acmesh-official/acme.sh.git
          dest: /opt/acme
          clone: yes
          update: yes
      - name: "Create directories"
        file:
          path: /etc/letsencrypt
          state: directory
          owner: root
          mode: u=rwx,g=rx,o=rx
        with_items:
          certs
          config
      # Generate the certificate using the var 'domain'
      - name: "Generate Let's Encrypt certificate"
        command: |
          /opt/acme/acme.sh --issue --server {{ acme_server }} --cert-home {{ letsencrypt_cert_dir }} --config-home {{ letsencrypt_config_dir }} --dns {{ acme_dns_plugin }} --domain {{ item }}
        with_items: "{{ domain.split(',') }}"
        register: generate_cert
        when: domain is defined
        ignore_errors: yes
      # Setting the var 'fix_key_permission' to 'yes' causes the key file to become world readable
      - name: "Fix key permissions"
        file:
          path: "{{ letsencrypt_cert_dir }}/{{ item }}/{{ item }}.key"
          mode: u=rw,g=r,o=r
        with_items: "{{ domain.split(',') }}"
        when: 
          - change_key_permission is defined
          - change_key_permission == 'yes'
      # Handles the restart/reloading of services. More than one service can be defined by using comma seperated values.
      # reload_service=service1,service2
      # restart_service=service1,service2
      - name: "Reload services"
        command: |
          service {{ item }} reload
        with_items: "{{ reload_service.split(',') }}"
        when:
          - reload_service is defined
          - generate_cert['failed'] == false
      - name: "Restart services"
        command: |
          service {{ item }} restart
        with_items: "{{ restart_service.split(',') }}"
        when:
          - restart_service is defined
          - generate_cert['failed'] == false
